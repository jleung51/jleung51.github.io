{"version":3,"sources":["logo.svg","Colors.js","TextStyles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","textStyles","title","fontFamily","fontWeight","fontSize","color","marginBottom","p","Panes","style","height","alignItems","justifyContent","textAlign","overflow","React","Component","PaneLeft","styling","pane","width","display","backgroundColor","float","flexDirection","logo","maxWidth","marginTop","src","alt","PaneRight","paddingTop","overflowY","App","pageStyling","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,4LCA9BC,G,MAEU,WAFVA,EAIC,UCFDC,EAAa,CACxBC,MAAO,CACLC,WAAY,SACZC,WAAY,IACZC,SAAU,GACVC,MDNS,UCQTC,aAAc,MAGhBC,EAAG,CACDL,WAAY,kBACZE,SAAU,GACVC,MDTO,Y,gBEILG,E,iLAYF,OACE,yBAAKC,MAXa,CAClBC,OAAQ,QAERC,WAAY,SACZC,eAAgB,SAChBC,UAAW,SAEXC,SAAU,WAKR,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAfYC,IAAMC,WAqBpBC,E,iLAEF,IAAMC,EAAU,CACdC,KAAM,CACJT,OAAQ,QACRU,MAAO,OACPC,QAAS,OAETC,gBAAiBvB,EAEjBwB,MAAO,OAEPC,cAAe,SACfb,WAAY,SACZC,eAAgB,UAGlBa,KAAM,CACJC,SAAU,MACVC,UAAW,IAIf,OACE,yBAAKlB,MAAOS,EAAQC,MAElB,uBAAGV,MAAOT,EAAWC,OAArB,iBACA,yBAAK2B,IAAKH,IAAMhB,MAAOS,EAAQO,KAAMI,IAAI,c,GA3B1Bd,IAAMC,WAkCvBc,E,iLAcF,OACE,yBAAKrB,MAba,CAClBY,QAAS,OACTE,MAAO,SAEPC,cAAe,SACfb,WAAY,SACZC,eAAgB,SAChBmB,WAAY,OAEZC,UAAW,WAKT,uBAAGvB,MAAOT,EAAWO,GAArB,gB,GAhBgBQ,IAAMC,WAqCfiB,MAff,WACE,IAAMC,EAAc,CAClBC,UAAW,QAEXb,gBAAiBvB,GAInB,OACE,yBAAKU,MAAOyB,GACV,kBAAC,EAAD,QCrFcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.326eafed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cfa7895f.svg\";","export const colors = {\n    primary: \"#3E3479\",\n    primaryBackground: \"#F1F0F6\",\n\n    offWhite: \"#FCFCFF\",\n    darkGrey: \"#717171\",\n    black: \"#000000\",\n};\n","import {colors} from './Colors.js';\n\nexport const textStyles = {\n  title: {\n    fontFamily: \"Ubuntu\",\n    fontWeight: 300,\n    fontSize: 64,\n    color: colors.primary,\n\n    marginBottom: \"7%\",\n  },\n\n  p: {\n    fontFamily: \"Source Sans Pro\",\n    fontSize: 24,\n    color: colors.black,\n\n    // margin: 0,\n  }\n};","import React from 'react';\n\n// Fonts must be imported before other components\nimport './Fonts.css';\n\nimport {textStyles} from './TextStyles.js';\nimport {colors} from './Colors.js';\n\nimport logo from './logo.svg';\n\nclass Panes extends React.Component {\n  render() {\n    const paneStyling = {\n      height: \"100vh\",\n      \n      alignItems: \"center\",\n      justifyContent: \"center\",\n      textAlign: \"center\",\n      \n      overflow: \"hidden\",\n    };\n\n    return (\n      <div style={paneStyling}>\n        <PaneLeft />\n        <PaneRight />\n      </div>\n    );\n  }\n}\n\nclass PaneLeft extends React.Component {\n  render() {\n    const styling = {\n      pane: {\n        height: \"100vh\",\n        width: \"35vw\",\n        display: \"flex\",\n        \n        backgroundColor: colors.primaryBackground,\n\n        float: \"left\",\n\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      },\n\n      logo: {\n        maxWidth: \"20%\",\n        marginTop: 0,\n      },\n    };\n\n    return (\n      <div style={styling.pane}>\n\n        <p style={textStyles.title}>Jeffrey Leung</p>\n        <img src={logo} style={styling.logo} alt=\"Logo\" />\n\n      </div>\n    );\n  }\n}\n\nclass PaneRight extends React.Component {\n  render() {\n    const paneStyling = {\n      display: \"flex\",\n      float: \"center\",\n\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      paddingTop: \"33vh\",\n      \n      overflowY: \"always\",\n    };\n\n    return (\n      <div style={paneStyling}>\n        <p style={textStyles.p}>Content</p>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  const pageStyling = {\n    minHeight: \"100vh\",\n\n    backgroundColor: colors.offWhite,\n\n  };\n\n  return (\n    <div style={pageStyling}>\n      <Panes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}